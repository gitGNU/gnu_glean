-*- mode: org; coding: utf-8; -*-

#+TITLE: Tentative Glean Road Map

Copyright (C) 2014 Alex Sassmannshausen <alex.sassmannshausen@gmail.com>

  Copying and distribution of this file, with or without modification,
  are permitted in any medium without royalty provided the copyright
  notice and this notice are preserved.

The goals of the Glean project are:

  - to provide a highly personal learning environment;

  - that is nonetheless capable to build on collaborative content
    contributions;

  - which provides the means to build hierarchies of content;

  - that is deployable in different ways (web service, self-hosted, single
    executable…);

  - to provide as core content modules that allow users to grok their GNU
    system and the core GNU components.

This document lists milestones toward these goals.

This document was first written just before the 0.1 release.  I intend to
maintain it as the authoritative roadmap for the project at irregular
intervals.

* Glean 0.1: Nov. 2014

** basic discipline definition capabilities

   - data-structures
     + recursion
     + hierarchies
     + meta-data
   - rudimentary DSL
   - ’installation’, ‘de-installation‘ routines

** basic Git, Glean and ICAO-spelling alphabet disciplines

   - examples and proofs of concept

** independent ’library‘, ‘lounge‘ & ‘client‘ servers

   - communication via Unix domain sockets
   - total runtime & namespace independence

** full compliance with GNU coding standards and conventions

   - i18n/l10n
   - accessibility
   - commit & change logs
   - build system
   - terminology
   - licensing

* Glean 0.2

** improved discipline DSL

   - discipline update paths & lounge synchronization
   - distinct namespacing for complex disciplines and ‘aux‘ files

** introduce ‘glean maker‘ command line tools

   - lint and review tools
   - infrastructure tools (code-generators etc.)
   - installation, de-installation wrappers
   - independent distribution of Disciplines

** improved challenge selection algorithms

   - respect more properties:
     + require
     + recommend
     + freeze
   - spaced repetition (Leitner system?)

** Emacs UI

   - communicate via Geiser
   - use ‘monadic-min‘ library
