* Commentary
Commentary serves to provide background information on the module. It is primarily conceived of as not accessible to the player, but rather to creators. Functionality to expose it in game may still be provided.

An attempt to write a module in org-mode (plain text) to assess its feasibility.
The module is based on R. Kent Dybvig's The Scheme Programming Language (need permission before publication).
It will follow the individual chapters in its 'story mode', but will build on the reference section in Chapter 6.
Guilecraft tags in this module represent the same procedure, asked about in different manners. 
This module is hand-crafted.
* Title
The Scheme Programming Language (Reference)
* Description
This module will allow you to learn the most commonly used procedures and data types of the Scheme programming Language. In the process you will become familiar with the syntax, idioms and flexibility of this dynamic Lisp dialect.
* Tag
Scheme
* Further-Reading
* Version
* Released
* Creators 
** Current-Creator
Alex Sassmannshausen
* Attribution
** Book
Dybvig, R. K., The Scheme Programming Language (4th ed.), 2009 MIT Press.
* Bibliography
** Book
Dybvig, R. K., The Scheme Programming Language (4th ed.), 2009 MIT Press.
* Keywords
Keywords are an optional way to classify your module, to provide them through indexed searches in Guilecraft etc. Probably want to use libextractor to automatically create keywords anyway, so this is entirely optional.
Should be comma separated.
Guile, Scheme, book, programming
* Set
** Title
Constants & Quotation
** Description
** Tag
constants
** Further-Reading
*** Book
Dybvig: 2009, Chapter 6.1
Dybvig: 2009, Chapter 2-2.2
** Group
*** Tag
numbers
*** Open-Problem
**** Question
How do you enter three quarters?
**** Solution
3/4
*** Open-Problem
**** Question
How do you enter 10?
**** Solution
10
** Group
*** Tag
strings
*** Open-Problem
**** Question
How do you enter the string 'Hello, world!'?
**** Solution
     "Hello, world!"
** Group
*** Tag
truth
*** Open-Problem
**** Question
How do you use 'false'?
**** Solution
#f
** Group
*** Tag
characters
*** Open-Problem
**** Question
How do you use the character 'c'?
**** Solution
#\c
** Group
*** Tag
vectors
*** Open-Problem
**** Question
How do you note the vector of 3, 4 and 5)
**** Solution
#vu(3 4 5)
** Group
*** Tag
quote
*** Open-Problem
**** Question
How would you stop Scheme from immediately evaluating (+ 3 4)?
**** Solution
'(+ 3 4)
** Group
*** Tag
quasiquote
*** Set
**** Tag
beginner
**** Open-Problem
***** Question
What is the shorthand for (quasiquote (3 4))?
***** Solution
`(3 4)
**** Open-Problem
***** Question
What is the shorthand for (quasiquote (7 (unquote (+ 3 4))))?
***** Solution
`(7 ,(+ 3 4))
*** Set
**** Tag
advanced
**** Open-Problem
***** Question
How would you get Scheme to evaluate (+ 3 4) within the to be quoted expression (* 7 (+ 3 4))?
***** Solution
`(* 7 ,(+ 3 4))
**** Open-Problem
***** Commentary
Should be a multiple choice question, as there are several correct answers to the below questionâ€¦
***** Question
How would you get Scheme to both quote and flatten the nested list (3 4 5 (6 7) 8)?
***** Solution
`(3 4 5 ,@(list 6 7) 8)
