* Overview
The basic structure of Guilecraft module files is the recursive stream. Streams are implemented in terms of sets, which are implemented either as a further number of streams, or as a number of problems.
Each stream consists of:
- at least one set. Only one set is active per stream to start with. Further sets can be activated, if they exist as building blocks of the current stream, when the number of permitted active sets for the current set is greater than the number of currently active sets.
- Each set consists of:
  - a number of problems (through one of the permitted problem-types), as the basic data structure for the set.
- A module is a special kind of stream — a top-level stream. It uses the <module> element tag, but should otherwise be treated as a normal stream.

- The simplest kind of module consists of the Module tag, its meta-data as children, and problems as its further children, which all inherit the Module's guilecraft tag as their guilecraft tag. This is possible because the modules are simply a special form of stream.

- One level up in complexity is the Module, with meta-data as children, and at least one Set as its child. This set will then have its meta-data, especially its guilecraft tag, and a number of problems as children. Multiple Sets can be added at the module's first 



Module -----------> Meta-Data
       \             |-> Tag	       +-----------------------------------+
        \            |-> Title	       |	       	       		   |
         \           |-> Etc.          |      Simple Set       		   |
          \                    	       |   +------------------------+      |
           \     Complex Set           |   |        -> Problem-Type |	   |
            \   +----------------------+   |       /   	       	    |	   |
             \  |                          |      /		    |	   |
              ->|Set -----> Meta-Data  --->|Set -----> Meta-Data    |	   |
              | |     \      |-> Tag  /	   +------------------------+	   |
              | |      \     |->     /	    			    	   |
              | |       \           /	    			    	   |
              | |        ->Stream---------> Meta-Data		    	   |
              | |        |          \        |-> Tag		    	   |
              | |        |           \       |->       	    Simple Set 	   |
              | |        |            \	   +--------------------------+	   |
              | |        |             --->|Set---> Problem-Type      |	   |
              | |        |             	   |         |-> Question     |	   |
              | |        |             	   |         |-> Solution     |	   |
              | |        |                 |         |-> Etc.	      |	   |
              | |        |  	    	   +--------------------------+	   |
              | |        ->Stream---------> Meta-Data  	       	       	   |
              | |                   \        |-> Tag   	       	       	   |
              | +------------------+ \       |->       	  Simple Set  	   |
              |                    |  \	   +-----------------------------+ |
              |                    |   --->|Set----->  Problem-Type   	 | |
              |     Simple Set     +------+|   	\       |-> Question   	 | |
              | +-----------------------+ || 	 \      |-> Solution  	 | |
              | |                       | ||      \     |-> Etc.      	 | |
	      ->|Set ----> Meta-Data   	| || 	   \   	      		 | |
	      	|      \       	       	| ||   	    -->  Problem-Type	 | |
	     	|      	\	      	| || 	          |-> Question	 | |
	     	| 	 -->Problem-Type| ||              |-> Solution	 | |
	     	| 	 |     	       	| ||   	          |-> Etc.	 | |
	     	|      	 -->Problem-Type| |+-----------------------------+ |
		+-----------------------+ |				   |
					  +--------------------------------+
* Tags
** Commentary	  	                  ---> Problem-Type
Optional                                        |-> Question
Commentary serves to provide                    |-> Solution dule. It is primarily conceived of as not accessible to the player, but rather to creators. Functionality to expose it in game may still be provided.
e.g.:                                           |-> Etc.
- module commentary
- set commentary
- problem commentary
** Title
Optional except for module
** Description
Optional
Recommended at least for module
** Tag
Mandatory for root level (module) and every set level.
A one word tag to group content together in a hierarchical structure.
e.g. SICP->streams->car-stream.
** Further-Reading
Optional at every level
Source of other sources for learning.
** Version
Optional
Root level only.
If not present, guilecraft server will do its best to implement its own versioning system of the module.
** Released
Optional
Root level only.
Friendly message to users. May or may not be exposed.
** Creators
Optional
Root level only.
*** Current-Creator
An individual creator, who currently maintains and develops the module.
Free text field.
*** Past-Creator
Credit field: credit past creators/maintainers who no longer take responsibility.
*** Contributor
Credit field. Give credit to some or all members of your community.
** Attribution
Optional.
If your module is derivative, this is the field to provide attribution to the original work. This may be a legal requirement depending on the original work's license.
If not, it is plain nice, when standing on the shoulders of giants to shout out to them.
*** Book
Individual attribution record, for books.
*** Website
Individual attribution record, for online resources.
*** Audio/Visual
Individual attribution record, for audio or visual materials.
** Bibliography
Optional
Root only.
Defining individual records here allows you to provide a comprehensive list of resources to your users.
*** Book
Individual attribution record, for books.
*** Website
Individual attribution record, for online resources.
*** Audio/Visual
Individual attribution record, for audio or visual materials.

** Keywords
Optional.
Root only.
Keywords are an optional way to classify your module, to provide them through indexed searches in Guilecraft etc. Probably want to use libextractor to automatically create keywords anyway, so this is entirely optional.
Should be comma separated.
Guile, Scheme, book, programming
** Set
Mandatory in root.
Root or set.
Each set contains a number of problems or another set. Whilst playing a game, Guilecraft automatically adds new sets to the current set of questions when the user's score is high enough.
Sets are your way to add progression to your modules. You can think of them as levels in traditional games, through progression to them is more gradual — you may both go back and forward, without even noticing.
Guilecraft will only add a sibling set to the current questions being asked when the player's score for the current set reaches a threshold.
*** Title
*** Description
*** Tag
*** Further-Reading
*** Problems
Mandatory.
Set Only.
This indicates that you are now ready to define this set's problems (questions and solutions).
**** Tag
Optional.
A tag at this level allows you to group a sub-set of problems together, so you don't have to define a tag at each level.
This is the recommended approach.
***** Open-Problem
Optional, though one of the problem types is required for a set.
Tag or Set.
Open-Problem problems consist of a simple question and a solution that has to be typed by the user free-form.
They provide most flexibility and are easiest to add, but need to be phrased carefully, so that the user knows exactly what they are expected to enter to solve the problem.
****** Question
Mandatory.
Problem-type level only.
A free text field to describe the problem and pose the challenge.
****** Solution
Mandatory.
Problem-type level only.
A free text field that contains the solution to the problem. It will provide the foundation for the evaluation of the problem.
***** Multiple-Choice
Optional, though one of the problem types is required for a set.
Tag or Set.
Multiple-Choice problems consist of a question, to pose the challenge, a solution, which is the correct solution for the problem, and one or more red-herrings, which provide alternative solutions that will be shown to the user.
****** Question
****** Solution
****** Red-Herring
Mandatory.
Multiple-Choice type problems only.
provide an alternative solution for the problem.

** Group
Similar to set, except that Guilecraft will add all sibling groups as sources of questions at once, thus providing a variety of valid problem types.
