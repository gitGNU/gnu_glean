-*- mode: org; coding: utf-8; -*-

#+TITLE: Hacking Glean

Copyright (C) 2014 Alex Sassmannshausen <alex.sassmannshausen@gmail.com>

  Copying and distribution of this file, with or without modification,
  are permitted in any medium without royalty provided the copyright
  notice and this notice are preserved.


* Building from Git

When building Glean from a checkout, the following packages are required in
addition to those mentioned in the installation instructions:

  - [[http://www.gnu.org/software/autoconf/][GNU Autoconf]]
  - [[http://www.gnu.org/software/automake/][GNU Automake]]
  - [[http://www.gnu.org/software/gettext/][GNU Gettext]]

Before being able to run ’./configure’ you will have to prepare the build
infrastructure by running ’autorecon -vif’.

Then, run ‘./configure’ as usual.

Finally, invoke ‘make check’ to run the tests.  If anything fails, please
report this as a bug to <alex.sassmannshausen@gmail.com>.

* Running Glean before it is installed

In order to run Glean without installing it on your system (e.g. to try it
out, or to hack on it), you can use the ’./pre-inst-env' wrapper script.  It
ensures Glean can find all files and sets any environment variables as needed.

An example invocation:

  ./pre-inst-env glean --help

Similarly, for a Guile session with access to the glean modules:

  ./pre-inst-env guile

* The Perfect Setup

The Perfect Setup to hack on Glean is basically the perfect setup used for
Guile hacking (info "(guile) Using Guile in Emacs").  First, you need more
than an editor, you need [[http://www.gnu.org/software/emacs][Emacs]], empowered by the wonderful [[http://nongnu.org/geiser/][Geiser]].

Geiser allows for interactive and incremental development from within Emacs:
code compilation and evaluation from within buffers, access to on-line
documentation (docstrings), context-sensitive completion, M-. to jump to an
object definition, a REPL to try out your code, and more.

To actually edit the code, Emacs already has a neat Scheme mode.  But in
addition to that, you must not miss [[http://www.emacswiki.org/emacs/ParEdit][Paredit]].  It provides facilities to
directly operate on the syntax tree, such as raising an s-expression or
wrapping it, swallowing or rejecting the following s-expression, etc.

* Submitting Patches

Development is done using the Git distributed version control system.  Thus,
access to the repository is not strictly necessary.  We welcome contributions
in the form of patches as produced by ‘git format-patch’ sent to
alex.sassmannshausen@gmail.com.  Please write commit logs in the [[http://www.gnu.org/prep/standards/html_node/Change-Logs.html#Change-Logs][GNU ChangeLog
format]]; you can check the commit history for examples.

* Coding Style

In general our code follows the [[info:standards][GNU Coding Standards]] (GCS).  However, the GCS
do not say much about Scheme, so here are some additional rules.

** Programming Paradigm

Scheme code in Glean is written in a purely functional style.  Exceptions to
these are code that involves input/output, and procedures that implement
low-level concepts, such as the ‘memoize’ procedure.

** Modules

Glean enforces a strict separation between the ’library’, ’lounge’ and
’client’ parts.  When hacking up new functionality it is imperative to take
this into account.  Resulting modules should live in the corresponding
namespaces and may not refer to modules living in the namespaces of the other
parts.  They may, however, refer to the modules listed in the ’common’
namespace.

** Data Types and Pattern Matching

The tendency in classical Lisp is to use lists to represent everything, and
then to browse them “by hand” using ‘car’, ‘cdr’, ‘cadr’, and co.  There are
several problems with that style, notably the fact that it is hard to read,
error-prone, and a hindrance to proper type error reports.

Glean code should define appropriate data types (for instance, using
‘define-record-type’) rather than abuse lists.  In addition, it should use
pattern matching, via Guile’s (ice-9 match) module, especially when matching
lists.

** Formatting Code

When writing Scheme code, we follow common wisdom among Scheme programmers.
In general, we follow the [[http://mumble.net/~campbell/scheme/style.txt][Riastradh's Lisp Style Rules]].  This document happens
to describe the conventions mostly used in Guile’s code too.  It is very
thoughtful and well written, so please do read it.

Some special forms introduced in Glean have special indentation rules.  These
are defined in the .dir-locals.el file, which Emacs automatically uses.  If
you do not use Emacs, please make sure to let your editor know the rules.

We require all top-level procedures to carry a docstring.  This requirement
can be relaxed for simple private procedures, but I would encourage you to
document even these to make your procedures more hacking friendly.

Procedures should not have more than four positional parameters.  Use keyword
parameters for procedures that take more than four parameters.

* Credit

This file is based on the HACKING file found in Gnu Guix.
