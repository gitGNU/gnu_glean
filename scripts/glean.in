#!@GUILE@ --no-auto-compile
-*- scheme -*-
!#

;; glean --- set load-paths and fire up boot -*- coding: utf-8 -*-
;;
;; Copyright Â© 2014 Alex Sassmannshausen <alex.sassmannshausen@gmail.com>
;;
;; Author: Alex Sassmannshausen <alex.sassmannshausen@gmail.com>
;; Created: 29 July 2014
;;
;; This file is part of Glean.
;;
;; Glean is free software; you can redistribute it and/or modify it under the
;; terms of the GNU General Public License as published by the Free Software
;; Foundation; either version 3 of the License, or (at your option) any later
;; version.
;;
;; Glean is distributed in the hope that it will be useful, but WITHOUT ANY
;; WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
;; FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
;; details.
;;
;; You should have received a copy of the GNU General Public License along
;; with glean; if not, contact:
;;
;; Free Software Foundation           Voice:  +1-617-542-5942
;; 59 Temple Place - Suite 330        Fax:    +1-617-542-2652
;; Boston, MA  02111-1307,  USA       gnu@gnu.org

;;; Commentary:
;;
;; Script setting up the load-paths so that the family of boot scripts can do
;; its work.
;; 
;; This file starts off as a virtual copy of GNU Guix's startup script written
;; by Mark H Weaver.
;;
;; IMPORTANT: We must avoid loading any modules from Guix here,
;; because we need to adjust the guile load paths first.
;; It's okay to import modules from core Guile though.
;;
;;; Code:

(use-modules (ice-9 regex)
             (srfi srfi-26))

(let ()
  (define-syntax-rule (push! elt v) (set! v (cons elt v)))

  (define config-lookup
    (let ((config '(("prefix"         . "@prefix@")
                    ("datarootdir"    . "@datarootdir@")
                    ("guilemoduledir" . "@guilemoduledir@")
                    ;; gettext stuff - not used, yet.
                    ;;("localedir"      . "@localedir@"))
                  ))
          (var-ref-regexp (make-regexp "\\$\\{([a-z]+)\\}")))
      (define (expand-var-ref match)
        (lookup (match:substring match 1)))
      (define (expand str)
        (regexp-substitute/global #f var-ref-regexp str
                                  'pre expand-var-ref 'post))
      (define (lookup name)
        (expand (assoc-ref config name)))
      lookup))

  (define (maybe-augment-load-paths!)
    (unless (getenv "GLEAN_UNINSTALLED")
      (setenv "CORE_ROOT" (config-lookup "guilemoduledir"))
      (let ((module-dir (config-lookup "guilemoduledir")))
        (push! module-dir %load-path)
        (push! module-dir %load-compiled-path))))

  (define (run-glean-main)
    (let ((glean-main (module-ref (resolve-interface '(glean boot))
                                  'boot)))
      ;; gettext stuff - not used, yet.
      ;;(bindtextdomain "glean" (config-lookup "localedir"))
      (glean-main (command-line))))

  (maybe-augment-load-paths!)
  (run-glean-main))
