;; source.scm --- glean maker source command    -*- coding: utf-8 -*-
;;
;; Copyright (C) 2014 Alex Sassmannshausen <alex.sassmannshausen@gmail.com>
;;
;; Author: Alex Sassmannshausen <alex.sassmannshausen@gmail.com>
;; Created: 26 October 2014
;;
;; This file is part of Glean.
;;
;; Glean is free software; you can redistribute it and/or modify it under the
;; terms of the GNU General Public License as published by the Free Software
;; Foundation; either version 3 of the License, or (at your option) any later
;; version.
;;
;; Glean is distributed in the hope that it will be useful, but WITHOUT ANY
;; WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
;; FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
;; details.
;;
;; You should have received a copy of the GNU General Public License along
;; with glean; if not, contact:
;;
;; Free Software Foundation           Voice:  +1-617-542-5942
;; 59 Temple Place - Suite 330        Fax:    +1-617-542-2652
;; Boston, MA  02111-1307,  USA       gnu@gnu.org

;;; Commentary:
;;
;; The `source' command enables content authors to quickly start work on their
;; discipline.  It is invoked with a value, which identifies the name of the
;; discipline to be worked upon.  If the discipline is already known within
;; the library, the source command should export that discipline and
;; anticipate that the author wants to work on a new version.  If the
;; discipline does not yet exist in the library then we create a directory and
;; with a basic file-structure named after the discipline.
;;
;; - [X] First implementation will not check the library.
;; - [ ] Second implementation will check library and error on discipline
;;       find.
;; - [ ] Third will export discipline if found in library.
;;
;;; Code:

(define-module (glean maker source)
  #:use-module (glean common monads)
  #:use-module (glean common utils)
  #:use-module (ice-9 match)
  #:use-module (ice-9 pretty-print)
  #:use-module (srfi srfi-26)
  #:export     (source
                ancestry-template))


;;;; Porcelain

(define* (source name force? #:key print)
  "Search the library for a discipline named NAME.  If it is found, export it
to the current working directory.  If it is not found, create a skeleton
discipline named NAME."
  (match (msource name force? print)
    ((? nothing? nothing)
     (emit-error (nothing-id nothing) (nothing-context nothing)))
    (otherwise #t)))

(define* (emit-error id #:optional (context #f))
  (match id
    ('file-exists
     (part-ways (_ "‘~a‘ already exists — not doing anything.
Use `--force' if you want to overwrite it.\n") context))))


;;;; Source Helpers

(define (source-checker name force?)
  (lambda ()
    (if (and (file-exists? name) (not force?))
        (nothing 'file-exists name)
        #t)))

(define (source-maker name print?)
  (define (out-maker target template)
    (if print?
        (with-output-to-port (current-output-port)
          (lambda () template))
        (with-output-to-file target
          (lambda () template))))
  (lambda ()
    (if (not print?)
        (mkdir-p (string-append name "/aux")))
    (map out-maker
         `(,(string-append name "/discipline.scm")
           ,(string-append name "/ancestry.scm"))
         `(,(discipline-template name) ,(ancestry-template name)))))

(define (ancestry-module name)
  (glean-module name 'ancestry))

(define (discipline-module name)
  (glean-module name 'discipline))

(define (glean-module discipline file)
  `(glean disciplines ,(string->symbol discipline) ,file))


;;;; IO Catalogues Monad
;;;
;;; A specialized monad for handling UI & IO in relation to Catalogues.

(define (maker-return value)
  (lambda ()
    value))

(define (maker-bind mvalue mproc)
  (lambda ()
    (let ((value (mvalue)))
      (if (nothing? value)
          value                         ; value is an error!
          ((mproc value))))))

(define-monad maker-monad
  (bind   maker-bind)
  (return maker-return))


;;;; Composite procedures

(define (msource name force? print?)
  ((mlet* maker-monad
       ((safe (source-checker name force?))
        (make (source-maker name print?)))
     (return #t))))

;;;; Templates

(define* (ancestry-template name #:key trees)
  (template
   #:filename "ancestry"
   #:summary (string-join `("the" ,name "ancestry file"))
   #:commentary
   (string-join `(";; This module defines" ,name "'s ancestry file.
;;
;; This file is auto-generated by Glean maker.  It defines data structures
;; used by the module management processes.
;;
;; ancestry-trees: defines the relationship between the discipline as defined
;; in the library at the time that this discipline was created.  If this is a
;; new discipline, then the tree will not refer to a previous discipline: it
;; will simply by #f."))
   #:code
   `((define-module ,(ancestry-module name)
       #:export (ancestry-trees))

     (define ancestry-trees (const ,(if trees
                                        `(quote ,trees)
                                        trees))))))

(define (discipline-template name)
  (template
   #:filename "discipline"
   #:summary (string-join `("the" ,name "discipline"))
   #:commentary
   (string-join `(";; This module defines the" ,name "discipline."))
   #:code
   `((define-module ,(discipline-module name)
       #:use-module ,(ancestry-module name)
       #:use-module (glean library core-templates)
       #:export (,(string->symbol name)))
     (define ,(string->symbol name)
       (module (quote ,(string->symbol name))
           #:name        ,name
           #:version     "0.1"
           #:keywords    '()
           #:synopsis    ""
           #:description ""
           #:creator     ""
           #:attribution '()
           #:contents    '()
           #:resources   '()
           #:ancestry    (ancestry-trees))))))

(define* (template #:key (filename "") (summary "") (commentary "") code)
  (define tmpl
    (const ";; ~a.scm --- ~a -*- coding: utf-8 -*-
;;
;; This file is part of Glean.
;;
;; Copyright (C) YEAR AUTHOR <EMAIL>
;; Created: DAY MONTH YEAR
;;
;; Glean is free software; you can redistribute it and/or modify it under the
;; terms of the GNU General Public License as published by the Free Software
;; Foundation; either version 3 of the License, or (at your option) any later
;; version.
;;
;; Glean is distributed in the hope that it will be useful, but WITHOUT ANY
;; WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
;; FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
;; details.
;;
;; You should have received a copy of the GNU General Public License along
;; with glean; if not, contact:
;;
;; Free Software Foundation           Voice:  +1-617-542-5942
;; 59 Temple Place - Suite 330        Fax:    +1-617-542-2652
;; Boston, MA  02111-1307,  USA       gnu@gnu.org

;;; Commentary:
;;
~a
;;
;;; Code:\n\n"))
  (format #t (tmpl) filename summary commentary)
  (for-each (lambda (form) (pretty-print form #:width 75) (newline)) code)
  (format #t ";;; ~a.scm ends here\n" filename))

;;; source.scm ends here
